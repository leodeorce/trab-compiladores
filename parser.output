Terminals unused in grammar

   ARROW
   TERNARY
   CHAIN
   PIPELINE
   SPREAD
   INCREMENT
   PLUS_ASSIGN
   DECREMENT
   SUB_ASSIGN
   MULT_ASSIGN
   DIV_ASSIGN
   EXP
   EXP_ASSIGN
   REM
   REM_ASSIGN
   BITWISE_NOT
   BITWISE_AND
   BITWISE_AND_ASSIGN
   BITWISE_OR
   BITWISE_OR_ASSIGN
   BITWISE_XOR
   BITWISE_XOR_ASSIGN
   LOGICAL_NOT
   LOGICAL_NULL
   LOGICAL_NULL_ASSIGN
   LOGICAL_AND
   LOGICAL_AND_ASSIGN
   LOGICAL_OR
   LOGICAL_OR_ASSIGN
   EQ_STRICT
   INEQ_STRICT
   LSHIFT
   LSHIFT_ASSIGN
   RSHIFT
   RSHIFT_ASSIGN
   RSHIFT_UNSIGNED
   RSHIFT_UNSIGNED_ASSIGN
   CASE
   CATCH
   CLASS
   CONST_RW
   CONTINUE
   DEBUGGER
   DEFAULT
   DELETE
   DO
   ENUM
   EXPORT
   EXTENDS
   FINALLY
   IMPLEMENTS
   IMPORT
   IN
   INSTANCEOF
   INTERFACE
   PACKAGE
   PRIVATE
   PROTECTED
   PUBLIC
   SUPER
   SWITCH
   THIS
   THROW
   TRY
   TYPEOF
   WITH
   AWAIT
   YIELD
   STATIC
   AS
   ASYNC
   FROM
   GET
   OF
   SET
   TARGET
   CONSTRUCTOR
   DECLARE
   MODULE
   REQUIRE
   SYMBOL
   TYPE


Rules useless in parser due to conflicts

  101 broken-finish: RETURN var-val


State 6 conflicts: 1 shift/reduce
State 14 conflicts: 12 shift/reduce
State 26 conflicts: 21 reduce/reduce
State 59 conflicts: 1 shift/reduce
State 60 conflicts: 20 reduce/reduce
State 80 conflicts: 1 shift/reduce
State 84 conflicts: 1 reduce/reduce
State 106 conflicts: 4 shift/reduce
State 107 conflicts: 6 shift/reduce
State 115 conflicts: 1 reduce/reduce
State 148 conflicts: 18 shift/reduce
State 153 conflicts: 1 shift/reduce, 1 reduce/reduce


Grammar

    0 $accept: line $end

    1 line: stmt-list
    2     | %empty

    3 stmt-list: stmt-list stmt
    4          | stmt

    5 stmt: let-stmt
    6     | var-stmt
    7     | expression-stmt
    8     | loop-stmt
    9     | atribuition
   10     | function-stmt
   11     | broken-finish

   12 let-stmt: LET ID SEMI
   13         | LET ID ASSIGN expr SEMI
   14         | LET ID COLON var-type SEMI
   15         | LET ID COLON var-type ASSIGN expr SEMI
   16         | LET ID COLON var-type LBRACKET RBRACKET SEMI
   17         | LET ID COLON var-type LBRACKET RBRACKET ASSIGN expr SEMI

   18 var-type: NUMBER
   19         | STRING
   20         | UNKNOWN
   21         | BOOLTYPE
   22         | ANY
   23         | VOID_RW
   24         | NULL_RW
   25         | UNDEFINED
   26         | NEVER

   27 var-stmt: VAR ID ASSIGN expr SEMI

   28 expr: array-expr
   29     | var-val
   30     | obj-declr

   31 obj-declr: ID LPAR elmts-list RPAR
   32          | ID LT var-type GT LPAR elmts-list RPAR
   33          | NEW ID LPAR elmts-list RPAR
   34          | NEW ID LT var-type GT LPAR elmts-list RPAR

   35 var-val: INT_VAL
   36        | REAL_VAL
   37        | STR_VAL
   38        | TRUE_RW
   39        | FALSE_RW
   40        | NULL_RW
   41        | UNDEFINED

   42 array-expr: LBRACKET elmts-list RBRACKET

   43 elmts-list: COMMA elmts-list
   44           | var-val COMMA elmts-list
   45           | var-val
   46           | %empty

   47 scope-box: LBRACE stmt-list RBRACE
   48          | LBRACE stmt-list BREAK stmt-list RBRACE

   49 expression-stmt: expre-ari
   50                | expre-logic
   51                | expre-conditio

   52 expre-var: var-val
   53          | ID

   54 expre-ari: expre-var
   55          | expre-ari operator-ari expre-ari
   56          | LPAR expre-ari RPAR

   57 expre-logic: expre-var
   58            | expre-logic operator-logic expre-logic
   59            | LPAR operator-logic RPAR

   60 expre-conditio: IF LPAR expre-logic RPAR scope-box
   61               | expre-conditio ELSE IF expre-logic RPAR scope-box
   62               | expre-conditio ELSE scope-box

   63 operator-ari: SUB
   64             | PLUS
   65             | MULT
   66             | DIV

   67 operator-logic: EQ
   68               | LT
   69               | GT
   70               | INEQ
   71               | LT_EQ
   72               | GT_EQ

   73 loop-stmt: for-declr
   74          | while-declr

   75 for-declr: FOR LPAR for-expres RPAR scope-box

   76 for-expres: SEMI SEMI
   77           | SEMI SEMI expre-logic
   78           | SEMI expre-logic SEMI expre-logic
   79           | ID ASSIGN var-val SEMI expre-logic SEMI expre-ari
   80           | LET ID ASSIGN var-val SEMI expre-logic SEMI expre-ari

   81 while-declr: while-header scope-box

   82 while-header: WHILE LPAR expre-logic RPAR

   83 atribuition: ID ASSIGN expression-stmt SEMI
   84            | ID ASSIGN expr SEMI
   85            | ID ASSIGN function-use

   86 function-stmt: function-declr
   87              | function-use

   88 function-declr: FUNCTION function-expres COLON var-type scope-box

   89 function-use: ID LPAR params-list RPAR SEMI
   90             | DOT ID SEMI
   91             | DOT function-use

   92 function-expres: ID LPAR params-list RPAR

   93 params-list: expr
   94            | ID
   95            | ID COLON var-type
   96            | expr COMMA params-list
   97            | ID COMMA params-list
   98            | ID COLON var-type COMMA params-list
   99            | %empty

  100 broken-finish: BREAK
  101              | RETURN var-val
  102              | RETURN function-stmt
  103              | RETURN expression-stmt
  104              | RETURN


Terminals, with rules where they appear

$end (0) 0
error (256)
ASSIGN (258) 13 15 17 27 79 80 83 84 85
ARROW (259)
COMMA (260) 43 44 96 97 98
SEMI (261) 12 13 14 15 16 17 27 76 77 78 79 80 83 84 89 90
COLON (262) 14 15 16 17 88 95 98
TERNARY (263)
CHAIN (264)
PIPELINE (265)
DOT (266) 90 91
SPREAD (267)
PLUS (268) 64
INCREMENT (269)
PLUS_ASSIGN (270)
SUB (271) 63
DECREMENT (272)
SUB_ASSIGN (273)
MULT (274) 65
MULT_ASSIGN (275)
DIV (276) 66
DIV_ASSIGN (277)
EXP (278)
EXP_ASSIGN (279)
REM (280)
REM_ASSIGN (281)
BITWISE_NOT (282)
BITWISE_AND (283)
BITWISE_AND_ASSIGN (284)
BITWISE_OR (285)
BITWISE_OR_ASSIGN (286)
BITWISE_XOR (287)
BITWISE_XOR_ASSIGN (288)
LOGICAL_NOT (289)
LOGICAL_NULL (290)
LOGICAL_NULL_ASSIGN (291)
LOGICAL_AND (292)
LOGICAL_AND_ASSIGN (293)
LOGICAL_OR (294)
LOGICAL_OR_ASSIGN (295)
EQ (296) 67
EQ_STRICT (297)
INEQ (298) 70
INEQ_STRICT (299)
LT (300) 32 34 68
LT_EQ (301) 71
GT (302) 32 34 69
GT_EQ (303) 72
LSHIFT (304)
LSHIFT_ASSIGN (305)
RSHIFT (306)
RSHIFT_ASSIGN (307)
RSHIFT_UNSIGNED (308)
RSHIFT_UNSIGNED_ASSIGN (309)
LPAR (310) 31 32 33 34 56 59 60 75 82 89 92
RPAR (311) 31 32 33 34 56 59 60 61 75 82 89 92
LBRACE (312) 47 48
RBRACE (313) 47 48
LBRACKET (314) 16 17 42
RBRACKET (315) 16 17 42
INT_VAL (316) 35
REAL_VAL (317) 36
STR_VAL (318) 37
ID (319) 12 13 14 15 16 17 27 31 32 33 34 53 79 80 83 84 85 89 90 92
    94 95 97 98
BREAK (320) 48 100
CASE (321)
CATCH (322)
CLASS (323)
CONST_RW (324)
CONTINUE (325)
DEBUGGER (326)
DEFAULT (327)
DELETE (328)
DO (329)
ELSE (330) 61 62
ENUM (331)
EXPORT (332)
EXTENDS (333)
FALSE_RW (334) 39
FINALLY (335)
FOR (336) 75
FUNCTION (337) 88
IF (338) 60 61
IMPLEMENTS (339)
IMPORT (340)
IN (341)
INSTANCEOF (342)
INTERFACE (343)
LET (344) 12 13 14 15 16 17 80
NEW (345) 33 34
NULL_RW (346) 24 40
PACKAGE (347)
PRIVATE (348)
PROTECTED (349)
PUBLIC (350)
RETURN (351) 101 102 103 104
SUPER (352)
SWITCH (353)
THIS (354)
THROW (355)
TRUE_RW (356) 38
TRY (357)
TYPEOF (358)
VAR (359) 27
VOID_RW (360) 23
WHILE (361) 82
WITH (362)
AWAIT (363)
YIELD (364)
STATIC (365)
AS (366)
ASYNC (367)
FROM (368)
GET (369)
OF (370)
SET (371)
TARGET (372)
ANY (373) 22
BOOLTYPE (374) 21
CONSTRUCTOR (375)
DECLARE (376)
MODULE (377)
REQUIRE (378)
NEVER (379) 26
NUMBER (380) 18
STRING (381) 19
SYMBOL (382)
TYPE (383)
UNDEFINED (384) 25 41
UNKNOWN (385) 20


Nonterminals, with rules where they appear

$accept (131)
    on left: 0
line (132)
    on left: 1 2, on right: 0
stmt-list (133)
    on left: 3 4, on right: 1 3 47 48
stmt (134)
    on left: 5 6 7 8 9 10 11, on right: 3 4
let-stmt (135)
    on left: 12 13 14 15 16 17, on right: 5
var-type (136)
    on left: 18 19 20 21 22 23 24 25 26, on right: 14 15 16 17 32 34
    88 95 98
var-stmt (137)
    on left: 27, on right: 6
expr (138)
    on left: 28 29 30, on right: 13 15 17 27 84 93 96
obj-declr (139)
    on left: 31 32 33 34, on right: 30
var-val (140)
    on left: 35 36 37 38 39 40 41, on right: 29 44 45 52 79 80 101
array-expr (141)
    on left: 42, on right: 28
elmts-list (142)
    on left: 43 44 45 46, on right: 31 32 33 34 42 43 44
scope-box (143)
    on left: 47 48, on right: 60 61 62 75 81 88
expression-stmt (144)
    on left: 49 50 51, on right: 7 83 103
expre-var (145)
    on left: 52 53, on right: 54 57
expre-ari (146)
    on left: 54 55 56, on right: 49 55 56 79 80
expre-logic (147)
    on left: 57 58 59, on right: 50 58 60 61 77 78 79 80 82
expre-conditio (148)
    on left: 60 61 62, on right: 51 61 62
operator-ari (149)
    on left: 63 64 65 66, on right: 55
operator-logic (150)
    on left: 67 68 69 70 71 72, on right: 58 59
loop-stmt (151)
    on left: 73 74, on right: 8
for-declr (152)
    on left: 75, on right: 73
for-expres (153)
    on left: 76 77 78 79 80, on right: 75
while-declr (154)
    on left: 81, on right: 74
while-header (155)
    on left: 82, on right: 81
atribuition (156)
    on left: 83 84 85, on right: 9
function-stmt (157)
    on left: 86 87, on right: 10 102
function-declr (158)
    on left: 88, on right: 86
function-use (159)
    on left: 89 90 91, on right: 85 87 91
function-expres (160)
    on left: 92, on right: 88
params-list (161)
    on left: 93 94 95 96 97 98 99, on right: 89 92 96 97 98
broken-finish (162)
    on left: 100 101 102 103 104, on right: 11


State 0

    0 $accept: . line $end

    DOT        shift, and go to state 1
    LPAR       shift, and go to state 2
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 6
    BREAK      shift, and go to state 7
    FALSE_RW   shift, and go to state 8
    FOR        shift, and go to state 9
    FUNCTION   shift, and go to state 10
    IF         shift, and go to state 11
    LET        shift, and go to state 12
    NULL_RW    shift, and go to state 13
    RETURN     shift, and go to state 14
    TRUE_RW    shift, and go to state 15
    VAR        shift, and go to state 16
    WHILE      shift, and go to state 17
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 2 (line)

    line             go to state 19
    stmt-list        go to state 20
    stmt             go to state 21
    let-stmt         go to state 22
    var-stmt         go to state 23
    var-val          go to state 24
    expression-stmt  go to state 25
    expre-var        go to state 26
    expre-ari        go to state 27
    expre-logic      go to state 28
    expre-conditio   go to state 29
    loop-stmt        go to state 30
    for-declr        go to state 31
    while-declr      go to state 32
    while-header     go to state 33
    atribuition      go to state 34
    function-stmt    go to state 35
    function-declr   go to state 36
    function-use     go to state 37
    broken-finish    go to state 38


State 1

   90 function-use: DOT . ID SEMI
   91             | DOT . function-use

    DOT  shift, and go to state 1
    ID   shift, and go to state 39

    function-use  go to state 40


State 2

   56 expre-ari: LPAR . expre-ari RPAR
   59 expre-logic: LPAR . operator-logic RPAR

    EQ         shift, and go to state 41
    INEQ       shift, and go to state 42
    LT         shift, and go to state 43
    LT_EQ      shift, and go to state 44
    GT         shift, and go to state 45
    GT_EQ      shift, and go to state 46
    LPAR       shift, and go to state 47
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val         go to state 24
    expre-var       go to state 49
    expre-ari       go to state 50
    operator-logic  go to state 51


State 3

   35 var-val: INT_VAL .

    $default  reduce using rule 35 (var-val)


State 4

   36 var-val: REAL_VAL .

    $default  reduce using rule 36 (var-val)


State 5

   37 var-val: STR_VAL .

    $default  reduce using rule 37 (var-val)


State 6

   53 expre-var: ID .
   83 atribuition: ID . ASSIGN expression-stmt SEMI
   84            | ID . ASSIGN expr SEMI
   85            | ID . ASSIGN function-use
   89 function-use: ID . LPAR params-list RPAR SEMI

    ASSIGN  shift, and go to state 52
    LPAR    shift, and go to state 53

    LPAR      [reduce using rule 53 (expre-var)]
    $default  reduce using rule 53 (expre-var)


State 7

  100 broken-finish: BREAK .

    $default  reduce using rule 100 (broken-finish)


State 8

   39 var-val: FALSE_RW .

    $default  reduce using rule 39 (var-val)


State 9

   75 for-declr: FOR . LPAR for-expres RPAR scope-box

    LPAR  shift, and go to state 54


State 10

   88 function-declr: FUNCTION . function-expres COLON var-type scope-box

    ID  shift, and go to state 55

    function-expres  go to state 56


State 11

   60 expre-conditio: IF . LPAR expre-logic RPAR scope-box

    LPAR  shift, and go to state 57


State 12

   12 let-stmt: LET . ID SEMI
   13         | LET . ID ASSIGN expr SEMI
   14         | LET . ID COLON var-type SEMI
   15         | LET . ID COLON var-type ASSIGN expr SEMI
   16         | LET . ID COLON var-type LBRACKET RBRACKET SEMI
   17         | LET . ID COLON var-type LBRACKET RBRACKET ASSIGN expr SEMI

    ID  shift, and go to state 58


State 13

   40 var-val: NULL_RW .

    $default  reduce using rule 40 (var-val)


State 14

  101 broken-finish: RETURN . var-val
  102              | RETURN . function-stmt
  103              | RETURN . expression-stmt
  104              | RETURN .

    DOT        shift, and go to state 1
    LPAR       shift, and go to state 2
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 59
    FALSE_RW   shift, and go to state 8
    FUNCTION   shift, and go to state 10
    IF         shift, and go to state 11
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    DOT        [reduce using rule 104 (broken-finish)]
    LPAR       [reduce using rule 104 (broken-finish)]
    INT_VAL    [reduce using rule 104 (broken-finish)]
    REAL_VAL   [reduce using rule 104 (broken-finish)]
    STR_VAL    [reduce using rule 104 (broken-finish)]
    ID         [reduce using rule 104 (broken-finish)]
    FALSE_RW   [reduce using rule 104 (broken-finish)]
    FUNCTION   [reduce using rule 104 (broken-finish)]
    IF         [reduce using rule 104 (broken-finish)]
    NULL_RW    [reduce using rule 104 (broken-finish)]
    TRUE_RW    [reduce using rule 104 (broken-finish)]
    UNDEFINED  [reduce using rule 104 (broken-finish)]
    $default   reduce using rule 104 (broken-finish)

    var-val          go to state 60
    expression-stmt  go to state 61
    expre-var        go to state 26
    expre-ari        go to state 27
    expre-logic      go to state 28
    expre-conditio   go to state 29
    function-stmt    go to state 62
    function-declr   go to state 36
    function-use     go to state 37


State 15

   38 var-val: TRUE_RW .

    $default  reduce using rule 38 (var-val)


State 16

   27 var-stmt: VAR . ID ASSIGN expr SEMI

    ID  shift, and go to state 63


State 17

   82 while-header: WHILE . LPAR expre-logic RPAR

    LPAR  shift, and go to state 64


State 18

   41 var-val: UNDEFINED .

    $default  reduce using rule 41 (var-val)


State 19

    0 $accept: line . $end

    $end  shift, and go to state 65


State 20

    1 line: stmt-list .
    3 stmt-list: stmt-list . stmt

    DOT        shift, and go to state 1
    LPAR       shift, and go to state 2
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 6
    BREAK      shift, and go to state 7
    FALSE_RW   shift, and go to state 8
    FOR        shift, and go to state 9
    FUNCTION   shift, and go to state 10
    IF         shift, and go to state 11
    LET        shift, and go to state 12
    NULL_RW    shift, and go to state 13
    RETURN     shift, and go to state 14
    TRUE_RW    shift, and go to state 15
    VAR        shift, and go to state 16
    WHILE      shift, and go to state 17
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 1 (line)

    stmt             go to state 66
    let-stmt         go to state 22
    var-stmt         go to state 23
    var-val          go to state 24
    expression-stmt  go to state 25
    expre-var        go to state 26
    expre-ari        go to state 27
    expre-logic      go to state 28
    expre-conditio   go to state 29
    loop-stmt        go to state 30
    for-declr        go to state 31
    while-declr      go to state 32
    while-header     go to state 33
    atribuition      go to state 34
    function-stmt    go to state 35
    function-declr   go to state 36
    function-use     go to state 37
    broken-finish    go to state 38


State 21

    4 stmt-list: stmt .

    $default  reduce using rule 4 (stmt-list)


State 22

    5 stmt: let-stmt .

    $default  reduce using rule 5 (stmt)


State 23

    6 stmt: var-stmt .

    $default  reduce using rule 6 (stmt)


State 24

   52 expre-var: var-val .

    $default  reduce using rule 52 (expre-var)


State 25

    7 stmt: expression-stmt .

    $default  reduce using rule 7 (stmt)


State 26

   54 expre-ari: expre-var .
   57 expre-logic: expre-var .

    $end       reduce using rule 54 (expre-ari)
    $end       [reduce using rule 57 (expre-logic)]
    SEMI       reduce using rule 54 (expre-ari)
    SEMI       [reduce using rule 57 (expre-logic)]
    DOT        reduce using rule 54 (expre-ari)
    DOT        [reduce using rule 57 (expre-logic)]
    EQ         reduce using rule 57 (expre-logic)
    INEQ       reduce using rule 57 (expre-logic)
    LT         reduce using rule 57 (expre-logic)
    LT_EQ      reduce using rule 57 (expre-logic)
    GT         reduce using rule 57 (expre-logic)
    GT_EQ      reduce using rule 57 (expre-logic)
    LPAR       reduce using rule 54 (expre-ari)
    LPAR       [reduce using rule 57 (expre-logic)]
    RBRACE     reduce using rule 54 (expre-ari)
    RBRACE     [reduce using rule 57 (expre-logic)]
    INT_VAL    reduce using rule 54 (expre-ari)
    INT_VAL    [reduce using rule 57 (expre-logic)]
    REAL_VAL   reduce using rule 54 (expre-ari)
    REAL_VAL   [reduce using rule 57 (expre-logic)]
    STR_VAL    reduce using rule 54 (expre-ari)
    STR_VAL    [reduce using rule 57 (expre-logic)]
    ID         reduce using rule 54 (expre-ari)
    ID         [reduce using rule 57 (expre-logic)]
    BREAK      reduce using rule 54 (expre-ari)
    BREAK      [reduce using rule 57 (expre-logic)]
    FALSE_RW   reduce using rule 54 (expre-ari)
    FALSE_RW   [reduce using rule 57 (expre-logic)]
    FOR        reduce using rule 54 (expre-ari)
    FOR        [reduce using rule 57 (expre-logic)]
    FUNCTION   reduce using rule 54 (expre-ari)
    FUNCTION   [reduce using rule 57 (expre-logic)]
    IF         reduce using rule 54 (expre-ari)
    IF         [reduce using rule 57 (expre-logic)]
    LET        reduce using rule 54 (expre-ari)
    LET        [reduce using rule 57 (expre-logic)]
    NULL_RW    reduce using rule 54 (expre-ari)
    NULL_RW    [reduce using rule 57 (expre-logic)]
    RETURN     reduce using rule 54 (expre-ari)
    RETURN     [reduce using rule 57 (expre-logic)]
    TRUE_RW    reduce using rule 54 (expre-ari)
    TRUE_RW    [reduce using rule 57 (expre-logic)]
    VAR        reduce using rule 54 (expre-ari)
    VAR        [reduce using rule 57 (expre-logic)]
    WHILE      reduce using rule 54 (expre-ari)
    WHILE      [reduce using rule 57 (expre-logic)]
    UNDEFINED  reduce using rule 54 (expre-ari)
    UNDEFINED  [reduce using rule 57 (expre-logic)]
    $default   reduce using rule 54 (expre-ari)


State 27

   49 expression-stmt: expre-ari .
   55 expre-ari: expre-ari . operator-ari expre-ari

    PLUS  shift, and go to state 67
    SUB   shift, and go to state 68
    MULT  shift, and go to state 69
    DIV   shift, and go to state 70

    $default  reduce using rule 49 (expression-stmt)

    operator-ari  go to state 71


State 28

   50 expression-stmt: expre-logic .
   58 expre-logic: expre-logic . operator-logic expre-logic

    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46

    $default  reduce using rule 50 (expression-stmt)

    operator-logic  go to state 72


State 29

   51 expression-stmt: expre-conditio .
   61 expre-conditio: expre-conditio . ELSE IF expre-logic RPAR scope-box
   62               | expre-conditio . ELSE scope-box

    ELSE  shift, and go to state 73

    $default  reduce using rule 51 (expression-stmt)


State 30

    8 stmt: loop-stmt .

    $default  reduce using rule 8 (stmt)


State 31

   73 loop-stmt: for-declr .

    $default  reduce using rule 73 (loop-stmt)


State 32

   74 loop-stmt: while-declr .

    $default  reduce using rule 74 (loop-stmt)


State 33

   81 while-declr: while-header . scope-box

    LBRACE  shift, and go to state 74

    scope-box  go to state 75


State 34

    9 stmt: atribuition .

    $default  reduce using rule 9 (stmt)


State 35

   10 stmt: function-stmt .

    $default  reduce using rule 10 (stmt)


State 36

   86 function-stmt: function-declr .

    $default  reduce using rule 86 (function-stmt)


State 37

   87 function-stmt: function-use .

    $default  reduce using rule 87 (function-stmt)


State 38

   11 stmt: broken-finish .

    $default  reduce using rule 11 (stmt)


State 39

   89 function-use: ID . LPAR params-list RPAR SEMI
   90             | DOT ID . SEMI

    SEMI  shift, and go to state 76
    LPAR  shift, and go to state 53


State 40

   91 function-use: DOT function-use .

    $default  reduce using rule 91 (function-use)


State 41

   67 operator-logic: EQ .

    $default  reduce using rule 67 (operator-logic)


State 42

   70 operator-logic: INEQ .

    $default  reduce using rule 70 (operator-logic)


State 43

   68 operator-logic: LT .

    $default  reduce using rule 68 (operator-logic)


State 44

   71 operator-logic: LT_EQ .

    $default  reduce using rule 71 (operator-logic)


State 45

   69 operator-logic: GT .

    $default  reduce using rule 69 (operator-logic)


State 46

   72 operator-logic: GT_EQ .

    $default  reduce using rule 72 (operator-logic)


State 47

   56 expre-ari: LPAR . expre-ari RPAR

    LPAR       shift, and go to state 47
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val    go to state 24
    expre-var  go to state 49
    expre-ari  go to state 50


State 48

   53 expre-var: ID .

    $default  reduce using rule 53 (expre-var)


State 49

   54 expre-ari: expre-var .

    $default  reduce using rule 54 (expre-ari)


State 50

   55 expre-ari: expre-ari . operator-ari expre-ari
   56          | LPAR expre-ari . RPAR

    PLUS  shift, and go to state 67
    SUB   shift, and go to state 68
    MULT  shift, and go to state 69
    DIV   shift, and go to state 70
    RPAR  shift, and go to state 77

    operator-ari  go to state 71


State 51

   59 expre-logic: LPAR operator-logic . RPAR

    RPAR  shift, and go to state 78


State 52

   83 atribuition: ID ASSIGN . expression-stmt SEMI
   84            | ID ASSIGN . expr SEMI
   85            | ID ASSIGN . function-use

    DOT        shift, and go to state 1
    LPAR       shift, and go to state 2
    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 80
    FALSE_RW   shift, and go to state 8
    IF         shift, and go to state 11
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    expr             go to state 82
    obj-declr        go to state 83
    var-val          go to state 84
    array-expr       go to state 85
    expression-stmt  go to state 86
    expre-var        go to state 26
    expre-ari        go to state 27
    expre-logic      go to state 28
    expre-conditio   go to state 29
    function-use     go to state 87


State 53

   89 function-use: ID LPAR . params-list RPAR SEMI

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 88
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 99 (params-list)

    expr         go to state 89
    obj-declr    go to state 83
    var-val      go to state 90
    array-expr   go to state 85
    params-list  go to state 91


State 54

   75 for-declr: FOR LPAR . for-expres RPAR scope-box

    SEMI  shift, and go to state 92
    ID    shift, and go to state 93
    LET   shift, and go to state 94

    for-expres  go to state 95


State 55

   92 function-expres: ID . LPAR params-list RPAR

    LPAR  shift, and go to state 96


State 56

   88 function-declr: FUNCTION function-expres . COLON var-type scope-box

    COLON  shift, and go to state 97


State 57

   60 expre-conditio: IF LPAR . expre-logic RPAR scope-box

    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 100


State 58

   12 let-stmt: LET ID . SEMI
   13         | LET ID . ASSIGN expr SEMI
   14         | LET ID . COLON var-type SEMI
   15         | LET ID . COLON var-type ASSIGN expr SEMI
   16         | LET ID . COLON var-type LBRACKET RBRACKET SEMI
   17         | LET ID . COLON var-type LBRACKET RBRACKET ASSIGN expr SEMI

    ASSIGN  shift, and go to state 101
    SEMI    shift, and go to state 102
    COLON   shift, and go to state 103


State 59

   53 expre-var: ID .
   89 function-use: ID . LPAR params-list RPAR SEMI

    LPAR  shift, and go to state 53

    LPAR      [reduce using rule 53 (expre-var)]
    $default  reduce using rule 53 (expre-var)


State 60

   52 expre-var: var-val .
  101 broken-finish: RETURN var-val .

    $end       reduce using rule 52 (expre-var)
    $end       [reduce using rule 101 (broken-finish)]
    DOT        reduce using rule 52 (expre-var)
    DOT        [reduce using rule 101 (broken-finish)]
    LPAR       reduce using rule 52 (expre-var)
    LPAR       [reduce using rule 101 (broken-finish)]
    RBRACE     reduce using rule 52 (expre-var)
    RBRACE     [reduce using rule 101 (broken-finish)]
    INT_VAL    reduce using rule 52 (expre-var)
    INT_VAL    [reduce using rule 101 (broken-finish)]
    REAL_VAL   reduce using rule 52 (expre-var)
    REAL_VAL   [reduce using rule 101 (broken-finish)]
    STR_VAL    reduce using rule 52 (expre-var)
    STR_VAL    [reduce using rule 101 (broken-finish)]
    ID         reduce using rule 52 (expre-var)
    ID         [reduce using rule 101 (broken-finish)]
    BREAK      reduce using rule 52 (expre-var)
    BREAK      [reduce using rule 101 (broken-finish)]
    FALSE_RW   reduce using rule 52 (expre-var)
    FALSE_RW   [reduce using rule 101 (broken-finish)]
    FOR        reduce using rule 52 (expre-var)
    FOR        [reduce using rule 101 (broken-finish)]
    FUNCTION   reduce using rule 52 (expre-var)
    FUNCTION   [reduce using rule 101 (broken-finish)]
    IF         reduce using rule 52 (expre-var)
    IF         [reduce using rule 101 (broken-finish)]
    LET        reduce using rule 52 (expre-var)
    LET        [reduce using rule 101 (broken-finish)]
    NULL_RW    reduce using rule 52 (expre-var)
    NULL_RW    [reduce using rule 101 (broken-finish)]
    RETURN     reduce using rule 52 (expre-var)
    RETURN     [reduce using rule 101 (broken-finish)]
    TRUE_RW    reduce using rule 52 (expre-var)
    TRUE_RW    [reduce using rule 101 (broken-finish)]
    VAR        reduce using rule 52 (expre-var)
    VAR        [reduce using rule 101 (broken-finish)]
    WHILE      reduce using rule 52 (expre-var)
    WHILE      [reduce using rule 101 (broken-finish)]
    UNDEFINED  reduce using rule 52 (expre-var)
    UNDEFINED  [reduce using rule 101 (broken-finish)]
    $default   reduce using rule 52 (expre-var)


State 61

  103 broken-finish: RETURN expression-stmt .

    $default  reduce using rule 103 (broken-finish)


State 62

  102 broken-finish: RETURN function-stmt .

    $default  reduce using rule 102 (broken-finish)


State 63

   27 var-stmt: VAR ID . ASSIGN expr SEMI

    ASSIGN  shift, and go to state 104


State 64

   82 while-header: WHILE LPAR . expre-logic RPAR

    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 105


State 65

    0 $accept: line $end .

    $default  accept


State 66

    3 stmt-list: stmt-list stmt .

    $default  reduce using rule 3 (stmt-list)


State 67

   64 operator-ari: PLUS .

    $default  reduce using rule 64 (operator-ari)


State 68

   63 operator-ari: SUB .

    $default  reduce using rule 63 (operator-ari)


State 69

   65 operator-ari: MULT .

    $default  reduce using rule 65 (operator-ari)


State 70

   66 operator-ari: DIV .

    $default  reduce using rule 66 (operator-ari)


State 71

   55 expre-ari: expre-ari operator-ari . expre-ari

    LPAR       shift, and go to state 47
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val    go to state 24
    expre-var  go to state 49
    expre-ari  go to state 106


State 72

   58 expre-logic: expre-logic operator-logic . expre-logic

    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 107


State 73

   61 expre-conditio: expre-conditio ELSE . IF expre-logic RPAR scope-box
   62               | expre-conditio ELSE . scope-box

    LBRACE  shift, and go to state 74
    IF      shift, and go to state 108

    scope-box  go to state 109


State 74

   47 scope-box: LBRACE . stmt-list RBRACE
   48          | LBRACE . stmt-list BREAK stmt-list RBRACE

    DOT        shift, and go to state 1
    LPAR       shift, and go to state 2
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 6
    BREAK      shift, and go to state 7
    FALSE_RW   shift, and go to state 8
    FOR        shift, and go to state 9
    FUNCTION   shift, and go to state 10
    IF         shift, and go to state 11
    LET        shift, and go to state 12
    NULL_RW    shift, and go to state 13
    RETURN     shift, and go to state 14
    TRUE_RW    shift, and go to state 15
    VAR        shift, and go to state 16
    WHILE      shift, and go to state 17
    UNDEFINED  shift, and go to state 18

    stmt-list        go to state 110
    stmt             go to state 21
    let-stmt         go to state 22
    var-stmt         go to state 23
    var-val          go to state 24
    expression-stmt  go to state 25
    expre-var        go to state 26
    expre-ari        go to state 27
    expre-logic      go to state 28
    expre-conditio   go to state 29
    loop-stmt        go to state 30
    for-declr        go to state 31
    while-declr      go to state 32
    while-header     go to state 33
    atribuition      go to state 34
    function-stmt    go to state 35
    function-declr   go to state 36
    function-use     go to state 37
    broken-finish    go to state 38


State 75

   81 while-declr: while-header scope-box .

    $default  reduce using rule 81 (while-declr)


State 76

   90 function-use: DOT ID SEMI .

    $default  reduce using rule 90 (function-use)


State 77

   56 expre-ari: LPAR expre-ari RPAR .

    $default  reduce using rule 56 (expre-ari)


State 78

   59 expre-logic: LPAR operator-logic RPAR .

    $default  reduce using rule 59 (expre-logic)


State 79

   42 array-expr: LBRACKET . elmts-list RBRACKET

    COMMA      shift, and go to state 111
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 46 (elmts-list)

    var-val     go to state 112
    elmts-list  go to state 113


State 80

   31 obj-declr: ID . LPAR elmts-list RPAR
   32          | ID . LT var-type GT LPAR elmts-list RPAR
   53 expre-var: ID .
   89 function-use: ID . LPAR params-list RPAR SEMI

    LT    shift, and go to state 114
    LPAR  shift, and go to state 115

    LT        [reduce using rule 53 (expre-var)]
    $default  reduce using rule 53 (expre-var)


State 81

   33 obj-declr: NEW . ID LPAR elmts-list RPAR
   34          | NEW . ID LT var-type GT LPAR elmts-list RPAR

    ID  shift, and go to state 116


State 82

   84 atribuition: ID ASSIGN expr . SEMI

    SEMI  shift, and go to state 117


State 83

   30 expr: obj-declr .

    $default  reduce using rule 30 (expr)


State 84

   29 expr: var-val .
   52 expre-var: var-val .

    SEMI      reduce using rule 29 (expr)
    SEMI      [reduce using rule 52 (expre-var)]
    $default  reduce using rule 52 (expre-var)


State 85

   28 expr: array-expr .

    $default  reduce using rule 28 (expr)


State 86

   83 atribuition: ID ASSIGN expression-stmt . SEMI

    SEMI  shift, and go to state 118


State 87

   85 atribuition: ID ASSIGN function-use .

    $default  reduce using rule 85 (atribuition)


State 88

   31 obj-declr: ID . LPAR elmts-list RPAR
   32          | ID . LT var-type GT LPAR elmts-list RPAR
   94 params-list: ID .
   95            | ID . COLON var-type
   97            | ID . COMMA params-list
   98            | ID . COLON var-type COMMA params-list

    COMMA  shift, and go to state 119
    COLON  shift, and go to state 120
    LT     shift, and go to state 114
    LPAR   shift, and go to state 121

    $default  reduce using rule 94 (params-list)


State 89

   93 params-list: expr .
   96            | expr . COMMA params-list

    COMMA  shift, and go to state 122

    $default  reduce using rule 93 (params-list)


State 90

   29 expr: var-val .

    $default  reduce using rule 29 (expr)


State 91

   89 function-use: ID LPAR params-list . RPAR SEMI

    RPAR  shift, and go to state 123


State 92

   76 for-expres: SEMI . SEMI
   77           | SEMI . SEMI expre-logic
   78           | SEMI . expre-logic SEMI expre-logic

    SEMI       shift, and go to state 124
    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 125


State 93

   79 for-expres: ID . ASSIGN var-val SEMI expre-logic SEMI expre-ari

    ASSIGN  shift, and go to state 126


State 94

   80 for-expres: LET . ID ASSIGN var-val SEMI expre-logic SEMI expre-ari

    ID  shift, and go to state 127


State 95

   75 for-declr: FOR LPAR for-expres . RPAR scope-box

    RPAR  shift, and go to state 128


State 96

   92 function-expres: ID LPAR . params-list RPAR

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 88
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 99 (params-list)

    expr         go to state 89
    obj-declr    go to state 83
    var-val      go to state 90
    array-expr   go to state 85
    params-list  go to state 129


State 97

   88 function-declr: FUNCTION function-expres COLON . var-type scope-box

    NULL_RW    shift, and go to state 130
    VOID_RW    shift, and go to state 131
    ANY        shift, and go to state 132
    BOOLTYPE   shift, and go to state 133
    NEVER      shift, and go to state 134
    NUMBER     shift, and go to state 135
    STRING     shift, and go to state 136
    UNDEFINED  shift, and go to state 137
    UNKNOWN    shift, and go to state 138

    var-type  go to state 139


State 98

   59 expre-logic: LPAR . operator-logic RPAR

    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46

    operator-logic  go to state 51


State 99

   57 expre-logic: expre-var .

    $default  reduce using rule 57 (expre-logic)


State 100

   58 expre-logic: expre-logic . operator-logic expre-logic
   60 expre-conditio: IF LPAR expre-logic . RPAR scope-box

    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46
    RPAR   shift, and go to state 140

    operator-logic  go to state 72


State 101

   13 let-stmt: LET ID ASSIGN . expr SEMI

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 141
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    expr        go to state 142
    obj-declr   go to state 83
    var-val     go to state 90
    array-expr  go to state 85


State 102

   12 let-stmt: LET ID SEMI .

    $default  reduce using rule 12 (let-stmt)


State 103

   14 let-stmt: LET ID COLON . var-type SEMI
   15         | LET ID COLON . var-type ASSIGN expr SEMI
   16         | LET ID COLON . var-type LBRACKET RBRACKET SEMI
   17         | LET ID COLON . var-type LBRACKET RBRACKET ASSIGN expr SEMI

    NULL_RW    shift, and go to state 130
    VOID_RW    shift, and go to state 131
    ANY        shift, and go to state 132
    BOOLTYPE   shift, and go to state 133
    NEVER      shift, and go to state 134
    NUMBER     shift, and go to state 135
    STRING     shift, and go to state 136
    UNDEFINED  shift, and go to state 137
    UNKNOWN    shift, and go to state 138

    var-type  go to state 143


State 104

   27 var-stmt: VAR ID ASSIGN . expr SEMI

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 141
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    expr        go to state 144
    obj-declr   go to state 83
    var-val     go to state 90
    array-expr  go to state 85


State 105

   58 expre-logic: expre-logic . operator-logic expre-logic
   82 while-header: WHILE LPAR expre-logic . RPAR

    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46
    RPAR   shift, and go to state 145

    operator-logic  go to state 72


State 106

   55 expre-ari: expre-ari . operator-ari expre-ari
   55          | expre-ari operator-ari expre-ari .

    PLUS  shift, and go to state 67
    SUB   shift, and go to state 68
    MULT  shift, and go to state 69
    DIV   shift, and go to state 70

    PLUS      [reduce using rule 55 (expre-ari)]
    SUB       [reduce using rule 55 (expre-ari)]
    MULT      [reduce using rule 55 (expre-ari)]
    DIV       [reduce using rule 55 (expre-ari)]
    $default  reduce using rule 55 (expre-ari)

    operator-ari  go to state 71


State 107

   58 expre-logic: expre-logic . operator-logic expre-logic
   58            | expre-logic operator-logic expre-logic .

    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46

    EQ        [reduce using rule 58 (expre-logic)]
    INEQ      [reduce using rule 58 (expre-logic)]
    LT        [reduce using rule 58 (expre-logic)]
    LT_EQ     [reduce using rule 58 (expre-logic)]
    GT        [reduce using rule 58 (expre-logic)]
    GT_EQ     [reduce using rule 58 (expre-logic)]
    $default  reduce using rule 58 (expre-logic)

    operator-logic  go to state 72


State 108

   61 expre-conditio: expre-conditio ELSE IF . expre-logic RPAR scope-box

    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 146


State 109

   62 expre-conditio: expre-conditio ELSE scope-box .

    $default  reduce using rule 62 (expre-conditio)


State 110

    3 stmt-list: stmt-list . stmt
   47 scope-box: LBRACE stmt-list . RBRACE
   48          | LBRACE stmt-list . BREAK stmt-list RBRACE

    DOT        shift, and go to state 1
    LPAR       shift, and go to state 2
    RBRACE     shift, and go to state 147
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 6
    BREAK      shift, and go to state 148
    FALSE_RW   shift, and go to state 8
    FOR        shift, and go to state 9
    FUNCTION   shift, and go to state 10
    IF         shift, and go to state 11
    LET        shift, and go to state 12
    NULL_RW    shift, and go to state 13
    RETURN     shift, and go to state 14
    TRUE_RW    shift, and go to state 15
    VAR        shift, and go to state 16
    WHILE      shift, and go to state 17
    UNDEFINED  shift, and go to state 18

    stmt             go to state 66
    let-stmt         go to state 22
    var-stmt         go to state 23
    var-val          go to state 24
    expression-stmt  go to state 25
    expre-var        go to state 26
    expre-ari        go to state 27
    expre-logic      go to state 28
    expre-conditio   go to state 29
    loop-stmt        go to state 30
    for-declr        go to state 31
    while-declr      go to state 32
    while-header     go to state 33
    atribuition      go to state 34
    function-stmt    go to state 35
    function-declr   go to state 36
    function-use     go to state 37
    broken-finish    go to state 38


State 111

   43 elmts-list: COMMA . elmts-list

    COMMA      shift, and go to state 111
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 46 (elmts-list)

    var-val     go to state 112
    elmts-list  go to state 149


State 112

   44 elmts-list: var-val . COMMA elmts-list
   45           | var-val .

    COMMA  shift, and go to state 150

    $default  reduce using rule 45 (elmts-list)


State 113

   42 array-expr: LBRACKET elmts-list . RBRACKET

    RBRACKET  shift, and go to state 151


State 114

   32 obj-declr: ID LT . var-type GT LPAR elmts-list RPAR

    NULL_RW    shift, and go to state 130
    VOID_RW    shift, and go to state 131
    ANY        shift, and go to state 132
    BOOLTYPE   shift, and go to state 133
    NEVER      shift, and go to state 134
    NUMBER     shift, and go to state 135
    STRING     shift, and go to state 136
    UNDEFINED  shift, and go to state 137
    UNKNOWN    shift, and go to state 138

    var-type  go to state 152


State 115

   31 obj-declr: ID LPAR . elmts-list RPAR
   89 function-use: ID LPAR . params-list RPAR SEMI

    COMMA      shift, and go to state 111
    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 88
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    RPAR      reduce using rule 46 (elmts-list)
    RPAR      [reduce using rule 99 (params-list)]
    $default  reduce using rule 46 (elmts-list)

    expr         go to state 89
    obj-declr    go to state 83
    var-val      go to state 153
    array-expr   go to state 85
    elmts-list   go to state 154
    params-list  go to state 91


State 116

   33 obj-declr: NEW ID . LPAR elmts-list RPAR
   34          | NEW ID . LT var-type GT LPAR elmts-list RPAR

    LT    shift, and go to state 155
    LPAR  shift, and go to state 156


State 117

   84 atribuition: ID ASSIGN expr SEMI .

    $default  reduce using rule 84 (atribuition)


State 118

   83 atribuition: ID ASSIGN expression-stmt SEMI .

    $default  reduce using rule 83 (atribuition)


State 119

   97 params-list: ID COMMA . params-list

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 88
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 99 (params-list)

    expr         go to state 89
    obj-declr    go to state 83
    var-val      go to state 90
    array-expr   go to state 85
    params-list  go to state 157


State 120

   95 params-list: ID COLON . var-type
   98            | ID COLON . var-type COMMA params-list

    NULL_RW    shift, and go to state 130
    VOID_RW    shift, and go to state 131
    ANY        shift, and go to state 132
    BOOLTYPE   shift, and go to state 133
    NEVER      shift, and go to state 134
    NUMBER     shift, and go to state 135
    STRING     shift, and go to state 136
    UNDEFINED  shift, and go to state 137
    UNKNOWN    shift, and go to state 138

    var-type  go to state 158


State 121

   31 obj-declr: ID LPAR . elmts-list RPAR

    COMMA      shift, and go to state 111
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 46 (elmts-list)

    var-val     go to state 112
    elmts-list  go to state 154


State 122

   96 params-list: expr COMMA . params-list

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 88
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 99 (params-list)

    expr         go to state 89
    obj-declr    go to state 83
    var-val      go to state 90
    array-expr   go to state 85
    params-list  go to state 159


State 123

   89 function-use: ID LPAR params-list RPAR . SEMI

    SEMI  shift, and go to state 160


State 124

   76 for-expres: SEMI SEMI .
   77           | SEMI SEMI . expre-logic

    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 76 (for-expres)

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 161


State 125

   58 expre-logic: expre-logic . operator-logic expre-logic
   78 for-expres: SEMI expre-logic . SEMI expre-logic

    SEMI   shift, and go to state 162
    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46

    operator-logic  go to state 72


State 126

   79 for-expres: ID ASSIGN . var-val SEMI expre-logic SEMI expre-ari

    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val  go to state 163


State 127

   80 for-expres: LET ID . ASSIGN var-val SEMI expre-logic SEMI expre-ari

    ASSIGN  shift, and go to state 164


State 128

   75 for-declr: FOR LPAR for-expres RPAR . scope-box

    LBRACE  shift, and go to state 74

    scope-box  go to state 165


State 129

   92 function-expres: ID LPAR params-list . RPAR

    RPAR  shift, and go to state 166


State 130

   24 var-type: NULL_RW .

    $default  reduce using rule 24 (var-type)


State 131

   23 var-type: VOID_RW .

    $default  reduce using rule 23 (var-type)


State 132

   22 var-type: ANY .

    $default  reduce using rule 22 (var-type)


State 133

   21 var-type: BOOLTYPE .

    $default  reduce using rule 21 (var-type)


State 134

   26 var-type: NEVER .

    $default  reduce using rule 26 (var-type)


State 135

   18 var-type: NUMBER .

    $default  reduce using rule 18 (var-type)


State 136

   19 var-type: STRING .

    $default  reduce using rule 19 (var-type)


State 137

   25 var-type: UNDEFINED .

    $default  reduce using rule 25 (var-type)


State 138

   20 var-type: UNKNOWN .

    $default  reduce using rule 20 (var-type)


State 139

   88 function-declr: FUNCTION function-expres COLON var-type . scope-box

    LBRACE  shift, and go to state 74

    scope-box  go to state 167


State 140

   60 expre-conditio: IF LPAR expre-logic RPAR . scope-box

    LBRACE  shift, and go to state 74

    scope-box  go to state 168


State 141

   31 obj-declr: ID . LPAR elmts-list RPAR
   32          | ID . LT var-type GT LPAR elmts-list RPAR

    LT    shift, and go to state 114
    LPAR  shift, and go to state 121


State 142

   13 let-stmt: LET ID ASSIGN expr . SEMI

    SEMI  shift, and go to state 169


State 143

   14 let-stmt: LET ID COLON var-type . SEMI
   15         | LET ID COLON var-type . ASSIGN expr SEMI
   16         | LET ID COLON var-type . LBRACKET RBRACKET SEMI
   17         | LET ID COLON var-type . LBRACKET RBRACKET ASSIGN expr SEMI

    ASSIGN    shift, and go to state 170
    SEMI      shift, and go to state 171
    LBRACKET  shift, and go to state 172


State 144

   27 var-stmt: VAR ID ASSIGN expr . SEMI

    SEMI  shift, and go to state 173


State 145

   82 while-header: WHILE LPAR expre-logic RPAR .

    $default  reduce using rule 82 (while-header)


State 146

   58 expre-logic: expre-logic . operator-logic expre-logic
   61 expre-conditio: expre-conditio ELSE IF expre-logic . RPAR scope-box

    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46
    RPAR   shift, and go to state 174

    operator-logic  go to state 72


State 147

   47 scope-box: LBRACE stmt-list RBRACE .

    $default  reduce using rule 47 (scope-box)


State 148

   48 scope-box: LBRACE stmt-list BREAK . stmt-list RBRACE
  100 broken-finish: BREAK .

    DOT        shift, and go to state 1
    LPAR       shift, and go to state 2
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 6
    BREAK      shift, and go to state 7
    FALSE_RW   shift, and go to state 8
    FOR        shift, and go to state 9
    FUNCTION   shift, and go to state 10
    IF         shift, and go to state 11
    LET        shift, and go to state 12
    NULL_RW    shift, and go to state 13
    RETURN     shift, and go to state 14
    TRUE_RW    shift, and go to state 15
    VAR        shift, and go to state 16
    WHILE      shift, and go to state 17
    UNDEFINED  shift, and go to state 18

    DOT        [reduce using rule 100 (broken-finish)]
    LPAR       [reduce using rule 100 (broken-finish)]
    INT_VAL    [reduce using rule 100 (broken-finish)]
    REAL_VAL   [reduce using rule 100 (broken-finish)]
    STR_VAL    [reduce using rule 100 (broken-finish)]
    ID         [reduce using rule 100 (broken-finish)]
    BREAK      [reduce using rule 100 (broken-finish)]
    FALSE_RW   [reduce using rule 100 (broken-finish)]
    FOR        [reduce using rule 100 (broken-finish)]
    FUNCTION   [reduce using rule 100 (broken-finish)]
    IF         [reduce using rule 100 (broken-finish)]
    LET        [reduce using rule 100 (broken-finish)]
    NULL_RW    [reduce using rule 100 (broken-finish)]
    RETURN     [reduce using rule 100 (broken-finish)]
    TRUE_RW    [reduce using rule 100 (broken-finish)]
    VAR        [reduce using rule 100 (broken-finish)]
    WHILE      [reduce using rule 100 (broken-finish)]
    UNDEFINED  [reduce using rule 100 (broken-finish)]
    $default   reduce using rule 100 (broken-finish)

    stmt-list        go to state 175
    stmt             go to state 21
    let-stmt         go to state 22
    var-stmt         go to state 23
    var-val          go to state 24
    expression-stmt  go to state 25
    expre-var        go to state 26
    expre-ari        go to state 27
    expre-logic      go to state 28
    expre-conditio   go to state 29
    loop-stmt        go to state 30
    for-declr        go to state 31
    while-declr      go to state 32
    while-header     go to state 33
    atribuition      go to state 34
    function-stmt    go to state 35
    function-declr   go to state 36
    function-use     go to state 37
    broken-finish    go to state 38


State 149

   43 elmts-list: COMMA elmts-list .

    $default  reduce using rule 43 (elmts-list)


State 150

   44 elmts-list: var-val COMMA . elmts-list

    COMMA      shift, and go to state 111
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 46 (elmts-list)

    var-val     go to state 112
    elmts-list  go to state 176


State 151

   42 array-expr: LBRACKET elmts-list RBRACKET .

    $default  reduce using rule 42 (array-expr)


State 152

   32 obj-declr: ID LT var-type . GT LPAR elmts-list RPAR

    GT  shift, and go to state 177


State 153

   29 expr: var-val .
   44 elmts-list: var-val . COMMA elmts-list
   45           | var-val .

    COMMA  shift, and go to state 150

    COMMA     [reduce using rule 29 (expr)]
    RPAR      reduce using rule 29 (expr)
    RPAR      [reduce using rule 45 (elmts-list)]
    $default  reduce using rule 29 (expr)


State 154

   31 obj-declr: ID LPAR elmts-list . RPAR

    RPAR  shift, and go to state 178


State 155

   34 obj-declr: NEW ID LT . var-type GT LPAR elmts-list RPAR

    NULL_RW    shift, and go to state 130
    VOID_RW    shift, and go to state 131
    ANY        shift, and go to state 132
    BOOLTYPE   shift, and go to state 133
    NEVER      shift, and go to state 134
    NUMBER     shift, and go to state 135
    STRING     shift, and go to state 136
    UNDEFINED  shift, and go to state 137
    UNKNOWN    shift, and go to state 138

    var-type  go to state 179


State 156

   33 obj-declr: NEW ID LPAR . elmts-list RPAR

    COMMA      shift, and go to state 111
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 46 (elmts-list)

    var-val     go to state 112
    elmts-list  go to state 180


State 157

   97 params-list: ID COMMA params-list .

    $default  reduce using rule 97 (params-list)


State 158

   95 params-list: ID COLON var-type .
   98            | ID COLON var-type . COMMA params-list

    COMMA  shift, and go to state 181

    $default  reduce using rule 95 (params-list)


State 159

   96 params-list: expr COMMA params-list .

    $default  reduce using rule 96 (params-list)


State 160

   89 function-use: ID LPAR params-list RPAR SEMI .

    $default  reduce using rule 89 (function-use)


State 161

   58 expre-logic: expre-logic . operator-logic expre-logic
   77 for-expres: SEMI SEMI expre-logic .

    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46

    $default  reduce using rule 77 (for-expres)

    operator-logic  go to state 72


State 162

   78 for-expres: SEMI expre-logic SEMI . expre-logic

    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 182


State 163

   79 for-expres: ID ASSIGN var-val . SEMI expre-logic SEMI expre-ari

    SEMI  shift, and go to state 183


State 164

   80 for-expres: LET ID ASSIGN . var-val SEMI expre-logic SEMI expre-ari

    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val  go to state 184


State 165

   75 for-declr: FOR LPAR for-expres RPAR scope-box .

    $default  reduce using rule 75 (for-declr)


State 166

   92 function-expres: ID LPAR params-list RPAR .

    $default  reduce using rule 92 (function-expres)


State 167

   88 function-declr: FUNCTION function-expres COLON var-type scope-box .

    $default  reduce using rule 88 (function-declr)


State 168

   60 expre-conditio: IF LPAR expre-logic RPAR scope-box .

    $default  reduce using rule 60 (expre-conditio)


State 169

   13 let-stmt: LET ID ASSIGN expr SEMI .

    $default  reduce using rule 13 (let-stmt)


State 170

   15 let-stmt: LET ID COLON var-type ASSIGN . expr SEMI

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 141
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    expr        go to state 185
    obj-declr   go to state 83
    var-val     go to state 90
    array-expr  go to state 85


State 171

   14 let-stmt: LET ID COLON var-type SEMI .

    $default  reduce using rule 14 (let-stmt)


State 172

   16 let-stmt: LET ID COLON var-type LBRACKET . RBRACKET SEMI
   17         | LET ID COLON var-type LBRACKET . RBRACKET ASSIGN expr SEMI

    RBRACKET  shift, and go to state 186


State 173

   27 var-stmt: VAR ID ASSIGN expr SEMI .

    $default  reduce using rule 27 (var-stmt)


State 174

   61 expre-conditio: expre-conditio ELSE IF expre-logic RPAR . scope-box

    LBRACE  shift, and go to state 74

    scope-box  go to state 187


State 175

    3 stmt-list: stmt-list . stmt
   48 scope-box: LBRACE stmt-list BREAK stmt-list . RBRACE

    DOT        shift, and go to state 1
    LPAR       shift, and go to state 2
    RBRACE     shift, and go to state 188
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 6
    BREAK      shift, and go to state 7
    FALSE_RW   shift, and go to state 8
    FOR        shift, and go to state 9
    FUNCTION   shift, and go to state 10
    IF         shift, and go to state 11
    LET        shift, and go to state 12
    NULL_RW    shift, and go to state 13
    RETURN     shift, and go to state 14
    TRUE_RW    shift, and go to state 15
    VAR        shift, and go to state 16
    WHILE      shift, and go to state 17
    UNDEFINED  shift, and go to state 18

    stmt             go to state 66
    let-stmt         go to state 22
    var-stmt         go to state 23
    var-val          go to state 24
    expression-stmt  go to state 25
    expre-var        go to state 26
    expre-ari        go to state 27
    expre-logic      go to state 28
    expre-conditio   go to state 29
    loop-stmt        go to state 30
    for-declr        go to state 31
    while-declr      go to state 32
    while-header     go to state 33
    atribuition      go to state 34
    function-stmt    go to state 35
    function-declr   go to state 36
    function-use     go to state 37
    broken-finish    go to state 38


State 176

   44 elmts-list: var-val COMMA elmts-list .

    $default  reduce using rule 44 (elmts-list)


State 177

   32 obj-declr: ID LT var-type GT . LPAR elmts-list RPAR

    LPAR  shift, and go to state 189


State 178

   31 obj-declr: ID LPAR elmts-list RPAR .

    $default  reduce using rule 31 (obj-declr)


State 179

   34 obj-declr: NEW ID LT var-type . GT LPAR elmts-list RPAR

    GT  shift, and go to state 190


State 180

   33 obj-declr: NEW ID LPAR elmts-list . RPAR

    RPAR  shift, and go to state 191


State 181

   98 params-list: ID COLON var-type COMMA . params-list

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 88
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 99 (params-list)

    expr         go to state 89
    obj-declr    go to state 83
    var-val      go to state 90
    array-expr   go to state 85
    params-list  go to state 192


State 182

   58 expre-logic: expre-logic . operator-logic expre-logic
   78 for-expres: SEMI expre-logic SEMI expre-logic .

    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46

    $default  reduce using rule 78 (for-expres)

    operator-logic  go to state 72


State 183

   79 for-expres: ID ASSIGN var-val SEMI . expre-logic SEMI expre-ari

    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 193


State 184

   80 for-expres: LET ID ASSIGN var-val . SEMI expre-logic SEMI expre-ari

    SEMI  shift, and go to state 194


State 185

   15 let-stmt: LET ID COLON var-type ASSIGN expr . SEMI

    SEMI  shift, and go to state 195


State 186

   16 let-stmt: LET ID COLON var-type LBRACKET RBRACKET . SEMI
   17         | LET ID COLON var-type LBRACKET RBRACKET . ASSIGN expr SEMI

    ASSIGN  shift, and go to state 196
    SEMI    shift, and go to state 197


State 187

   61 expre-conditio: expre-conditio ELSE IF expre-logic RPAR scope-box .

    $default  reduce using rule 61 (expre-conditio)


State 188

   48 scope-box: LBRACE stmt-list BREAK stmt-list RBRACE .

    $default  reduce using rule 48 (scope-box)


State 189

   32 obj-declr: ID LT var-type GT LPAR . elmts-list RPAR

    COMMA      shift, and go to state 111
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 46 (elmts-list)

    var-val     go to state 112
    elmts-list  go to state 198


State 190

   34 obj-declr: NEW ID LT var-type GT . LPAR elmts-list RPAR

    LPAR  shift, and go to state 199


State 191

   33 obj-declr: NEW ID LPAR elmts-list RPAR .

    $default  reduce using rule 33 (obj-declr)


State 192

   98 params-list: ID COLON var-type COMMA params-list .

    $default  reduce using rule 98 (params-list)


State 193

   58 expre-logic: expre-logic . operator-logic expre-logic
   79 for-expres: ID ASSIGN var-val SEMI expre-logic . SEMI expre-ari

    SEMI   shift, and go to state 200
    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46

    operator-logic  go to state 72


State 194

   80 for-expres: LET ID ASSIGN var-val SEMI . expre-logic SEMI expre-ari

    LPAR       shift, and go to state 98
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val      go to state 24
    expre-var    go to state 99
    expre-logic  go to state 201


State 195

   15 let-stmt: LET ID COLON var-type ASSIGN expr SEMI .

    $default  reduce using rule 15 (let-stmt)


State 196

   17 let-stmt: LET ID COLON var-type LBRACKET RBRACKET ASSIGN . expr SEMI

    LBRACKET   shift, and go to state 79
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 141
    FALSE_RW   shift, and go to state 8
    NEW        shift, and go to state 81
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    expr        go to state 202
    obj-declr   go to state 83
    var-val     go to state 90
    array-expr  go to state 85


State 197

   16 let-stmt: LET ID COLON var-type LBRACKET RBRACKET SEMI .

    $default  reduce using rule 16 (let-stmt)


State 198

   32 obj-declr: ID LT var-type GT LPAR elmts-list . RPAR

    RPAR  shift, and go to state 203


State 199

   34 obj-declr: NEW ID LT var-type GT LPAR . elmts-list RPAR

    COMMA      shift, and go to state 111
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    $default  reduce using rule 46 (elmts-list)

    var-val     go to state 112
    elmts-list  go to state 204


State 200

   79 for-expres: ID ASSIGN var-val SEMI expre-logic SEMI . expre-ari

    LPAR       shift, and go to state 47
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val    go to state 24
    expre-var  go to state 49
    expre-ari  go to state 205


State 201

   58 expre-logic: expre-logic . operator-logic expre-logic
   80 for-expres: LET ID ASSIGN var-val SEMI expre-logic . SEMI expre-ari

    SEMI   shift, and go to state 206
    EQ     shift, and go to state 41
    INEQ   shift, and go to state 42
    LT     shift, and go to state 43
    LT_EQ  shift, and go to state 44
    GT     shift, and go to state 45
    GT_EQ  shift, and go to state 46

    operator-logic  go to state 72


State 202

   17 let-stmt: LET ID COLON var-type LBRACKET RBRACKET ASSIGN expr . SEMI

    SEMI  shift, and go to state 207


State 203

   32 obj-declr: ID LT var-type GT LPAR elmts-list RPAR .

    $default  reduce using rule 32 (obj-declr)


State 204

   34 obj-declr: NEW ID LT var-type GT LPAR elmts-list . RPAR

    RPAR  shift, and go to state 208


State 205

   55 expre-ari: expre-ari . operator-ari expre-ari
   79 for-expres: ID ASSIGN var-val SEMI expre-logic SEMI expre-ari .

    PLUS  shift, and go to state 67
    SUB   shift, and go to state 68
    MULT  shift, and go to state 69
    DIV   shift, and go to state 70

    $default  reduce using rule 79 (for-expres)

    operator-ari  go to state 71


State 206

   80 for-expres: LET ID ASSIGN var-val SEMI expre-logic SEMI . expre-ari

    LPAR       shift, and go to state 47
    INT_VAL    shift, and go to state 3
    REAL_VAL   shift, and go to state 4
    STR_VAL    shift, and go to state 5
    ID         shift, and go to state 48
    FALSE_RW   shift, and go to state 8
    NULL_RW    shift, and go to state 13
    TRUE_RW    shift, and go to state 15
    UNDEFINED  shift, and go to state 18

    var-val    go to state 24
    expre-var  go to state 49
    expre-ari  go to state 209


State 207

   17 let-stmt: LET ID COLON var-type LBRACKET RBRACKET ASSIGN expr SEMI .

    $default  reduce using rule 17 (let-stmt)


State 208

   34 obj-declr: NEW ID LT var-type GT LPAR elmts-list RPAR .

    $default  reduce using rule 34 (obj-declr)


State 209

   55 expre-ari: expre-ari . operator-ari expre-ari
   80 for-expres: LET ID ASSIGN var-val SEMI expre-logic SEMI expre-ari .

    PLUS  shift, and go to state 67
    SUB   shift, and go to state 68
    MULT  shift, and go to state 69
    DIV   shift, and go to state 70

    $default  reduce using rule 80 (for-expres)

    operator-ari  go to state 71

6: let -> LET
6: vet -> ID
6: : -> COLON
6: number -> NUMBER
6: [ -> LBRACKET
6: ] -> RBRACKET
6: = -> ASSIGN
6: [ -> LBRACKET
6: 0 -> INT_VAL
6: , -> COMMA
6: 0 -> INT_VAL
6: , -> COMMA
6: 0 -> INT_VAL
6: , -> COMMA
6: 0 -> INT_VAL
6: , -> COMMA
6: 0 -> INT_VAL
6: ] -> RBRACKET
6: ; -> SEMI
7: let -> LET
7: i -> ID
7: : -> COLON
7: number -> NUMBER
7: = -> ASSIGN
7: 0 -> INT_VAL
7: ; -> SEMI
8: while -> WHILE
8: ( -> LPAR
8: i -> ID
8: < -> LT
8: 5 -> INT_VAL
8: ) -> RPAR
8: { -> LBRACE
9: vet -> ID
9: [ -> LBRACKET
9: i -> ID
9: ] -> RBRACKET
9: = -> ASSIGN
9: i -> ID
9: + -> PLUS
9: 1 -> INT_VAL
9: ; -> SEMI
10: i -> ID
10: = -> ASSIGN
10: i -> ID
10: + -> PLUS
10: 1 -> INT_VAL
10: ; -> SEMI
11: } -> RBRACE
12: console -> ID
12: . -> DOT
12: log -> ID
12: ( -> LPAR
12: vet -> ID
12: ) -> RPAR
12: ; -> SEMI

3: let -> LET
3: x -> ID
3: : -> COLON
3: number -> NUMBER
Linha 3 Non-T "var-type" item 1
3: ; -> SEMI
Linha 3 Non-T "var-declr" item 4
Linha 3 Non-T "stmt" item 1
Linha 3 Non-T "stmt-list" item 2
5: x -> ID
5: = -> ASSIGN
Linha 5 Non-T "assignment" item 1
5: 2 -> INT_VAL
Linha 5 Non-T "var-val" item 1
Linha 5 Non-T "idx-safe-expr" item 1
Linha 5 Non-T "expr" item 1
5: + -> PLUS
5: 3 -> INT_VAL
Linha 5 Non-T "var-val" item 1
Linha 5 Non-T "idx-safe-expr" item 1
Linha 5 Non-T "expr" item 1
5: ; -> SEMI
Linha 5 Non-T "arit-expr" item 1
Linha 5 Non-T "idx-safe-expr" item 3
Linha 5 Non-T "expr" item 1
Linha 5 Non-T "assign-expr" item 2
Linha 5 Non-T "stmt" item 5
Linha 5 Non-T "stmt-list" item 1
6: console -> ID
6: . -> DOT
6: log -> ID
6: ( -> LPAR
6: x -> ID
6: ) -> RPAR
Linha 6 Non-T "idx-safe-expr" item 8
Linha 6 Non-T "expr" item 1
Linha 6 Non-T "args-list" item 4
Linha 6 Non-T "var-met" item 1
6: ; -> SEMI
Linha 6 Non-T "var-att" item 3
Linha 6 Non-T "idx-safe-expr" item 2
Linha 6 Non-T "expr" item 1
Linha 6 Non-T "stmt" item 4
Linha 6 Non-T "stmt-list" item 1
7: x -> ID
7: = -> ASSIGN
Linha 7 Non-T "assignment" item 1
7: 2 -> INT_VAL
Linha 7 Non-T "var-val" item 1
Linha 7 Non-T "idx-safe-expr" item 1
Linha 7 Non-T "expr" item 1
7: - -> SUB
7: 3 -> INT_VAL
Linha 7 Non-T "var-val" item 1
Linha 7 Non-T "idx-safe-expr" item 1
Linha 7 Non-T "expr" item 1
7: ; -> SEMI
Linha 7 Non-T "arit-expr" item 2
Linha 7 Non-T "idx-safe-expr" item 3
Linha 7 Non-T "expr" item 1
Linha 7 Non-T "assign-expr" item 2
Linha 7 Non-T "stmt" item 5
Linha 7 Non-T "stmt-list" item 1
8: console -> ID
8: . -> DOT
8: log -> ID
8: ( -> LPAR
8: x -> ID
8: ) -> RPAR
Linha 8 Non-T "idx-safe-expr" item 8
Linha 8 Non-T "expr" item 1
Linha 8 Non-T "args-list" item 4
Linha 8 Non-T "var-met" item 1
8: ; -> SEMI
Linha 8 Non-T "var-att" item 3
Linha 8 Non-T "idx-safe-expr" item 2
Linha 8 Non-T "expr" item 1
Linha 8 Non-T "stmt" item 4
Linha 8 Non-T "stmt-list" item 1
9: x -> ID
9: = -> ASSIGN
Linha 9 Non-T "assignment" item 1
9: 2 -> INT_VAL
Linha 9 Non-T "var-val" item 1
Linha 9 Non-T "idx-safe-expr" item 1
Linha 9 Non-T "expr" item 1
9: * -> MULT
9: 3 -> INT_VAL
Linha 9 Non-T "var-val" item 1
Linha 9 Non-T "idx-safe-expr" item 1
Linha 9 Non-T "expr" item 1
9: ; -> SEMI
Linha 9 Non-T "arit-expr" item 3
Linha 9 Non-T "idx-safe-expr" item 3
Linha 9 Non-T "expr" item 1
Linha 9 Non-T "assign-expr" item 2
Linha 9 Non-T "stmt" item 5
Linha 9 Non-T "stmt-list" item 1
10: console -> ID
10: . -> DOT
10: log -> ID
10: ( -> LPAR
10: x -> ID
10: ) -> RPAR
Linha 10 Non-T "idx-safe-expr" item 8
Linha 10 Non-T "expr" item 1
Linha 10 Non-T "args-list" item 4
Linha 10 Non-T "var-met" item 1
10: ; -> SEMI
Linha 10 Non-T "var-att" item 3
Linha 10 Non-T "idx-safe-expr" item 2
Linha 10 Non-T "expr" item 1
Linha 10 Non-T "stmt" item 4
Linha 10 Non-T "stmt-list" item 1
11: x -> ID
11: = -> ASSIGN
Linha 11 Non-T "assignment" item 1
11: 2 -> INT_VAL
Linha 11 Non-T "var-val" item 1
Linha 11 Non-T "idx-safe-expr" item 1
Linha 11 Non-T "expr" item 1
11: / -> DIV
11: 3 -> INT_VAL
Linha 11 Non-T "var-val" item 1
Linha 11 Non-T "idx-safe-expr" item 1
Linha 11 Non-T "expr" item 1
11: ; -> SEMI
Linha 11 Non-T "arit-expr" item 4
Linha 11 Non-T "idx-safe-expr" item 3
Linha 11 Non-T "expr" item 1
Linha 11 Non-T "assign-expr" item 2
Linha 11 Non-T "stmt" item 5
Linha 11 Non-T "stmt-list" item 1
12: console -> ID
12: . -> DOT
12: log -> ID
12: ( -> LPAR
12: x -> ID
12: ) -> RPAR
Linha 12 Non-T "idx-safe-expr" item 8
Linha 12 Non-T "expr" item 1
Linha 12 Non-T "args-list" item 4
Linha 12 Non-T "var-met" item 1
12: ; -> SEMI
Linha 12 Non-T "var-att" item 3
Linha 12 Non-T "idx-safe-expr" item 2
Linha 12 Non-T "expr" item 1
Linha 12 Non-T "stmt" item 4
Linha 12 Non-T "stmt-list" item 1
Linha 12 Non-T "line" item 1
Parse successful

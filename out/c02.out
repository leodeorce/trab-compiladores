3: let -> LET
3: x -> ID
3: = -> ASSIGN
Linha 3 Non-T "id-list" item 2
3: 3 -> INT_VAL
Linha 3 Non-T "var-val" item 1
Linha 3 Non-T "idx-safe-expr" item 1
Linha 3 Non-T "expr" item 1
3: ; -> SEMI
Linha 3 Non-T "var-declr" item 2
Linha 3 Non-T "stmt" item 1
Linha 3 Non-T "stmt-list" item 2
4: let -> LET
4: y -> ID
4: : -> COLON
4: number -> NUMBER
Linha 4 Non-T "var-type" item 1
4: = -> ASSIGN
4: 2 -> INT_VAL
Linha 4 Non-T "var-val" item 1
Linha 4 Non-T "idx-safe-expr" item 1
Linha 4 Non-T "expr" item 1
4: ; -> SEMI
Linha 4 Non-T "var-declr" item 5
Linha 4 Non-T "stmt" item 1
Linha 4 Non-T "stmt-list" item 1
5: let -> LET
5: c -> ID
5: : -> COLON
5: number -> NUMBER
Linha 5 Non-T "var-type" item 1
5: ; -> SEMI
Linha 5 Non-T "var-declr" item 4
Linha 5 Non-T "stmt" item 1
Linha 5 Non-T "stmt-list" item 1
6: c -> ID
6: = -> ASSIGN
Linha 6 Non-T "assignment" item 1
6: x -> ID
6: + -> PLUS
Linha 6 Non-T "idx-safe-expr" item 8
Linha 6 Non-T "expr" item 1
6: y -> ID
6: ; -> SEMI
Linha 6 Non-T "idx-safe-expr" item 8
Linha 6 Non-T "expr" item 1
Linha 6 Non-T "arit-expr" item 1
Linha 6 Non-T "idx-safe-expr" item 3
Linha 6 Non-T "expr" item 1
Linha 6 Non-T "assign-expr" item 2
Linha 6 Non-T "stmt" item 5
Linha 6 Non-T "stmt-list" item 1
7: console -> ID
7: . -> DOT
7: log -> ID
7: ( -> LPAR
7: c -> ID
7: ) -> RPAR
Linha 7 Non-T "idx-safe-expr" item 8
Linha 7 Non-T "expr" item 1
Linha 7 Non-T "args-list" item 4
Linha 7 Non-T "var-met" item 1
7: ; -> SEMI
Linha 7 Non-T "var-att" item 3
Linha 7 Non-T "idx-safe-expr" item 2
Linha 7 Non-T "expr" item 1
Linha 7 Non-T "stmt" item 4
Linha 7 Non-T "stmt-list" item 1
Linha 7 Non-T "line" item 1
Parse successful

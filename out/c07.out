3: function -> FUNCTION
3: gcd -> ID
3: ( -> LPAR
3: a -> ID
3: : -> COLON
3: number -> NUMBER
Linha 3 Non-T "var-type" item 1
3: , -> COMMA
3: b -> ID
3: : -> COLON
3: number -> NUMBER
Linha 3 Non-T "var-type" item 1
Linha 3 Non-T "params" item 4
3: ) -> RPAR
3: : -> COLON
3: number -> NUMBER
Linha 3 Non-T "var-type" item 1
3: { -> LBRACE
5: if -> IF
5: ( -> LPAR
5: a -> ID
5: == -> EQ
Linha 5 Non-T "idx-safe-expr" item 8
Linha 5 Non-T "expr" item 1
5: 0 -> INT_VAL
Linha 5 Non-T "var-val" item 1
Linha 5 Non-T "idx-safe-expr" item 1
Linha 5 Non-T "expr" item 1
5: ) -> RPAR
Linha 5 Non-T "logic-expr" item 1
Linha 5 Non-T "idx-unsafe-expr" item 2
Linha 5 Non-T "expr" item 2
5: { -> LBRACE
6: return -> RETURN
6: b -> ID
6: ; -> SEMI
Linha 6 Non-T "idx-safe-expr" item 8
Linha 6 Non-T "expr" item 1
Linha 6 Non-T "stmt" item 11
Linha 6 Non-T "stmt-list" item 2
7: } -> RBRACE
Linha 7 Non-T "line" item 1
8: if -> IF
Linha 8 Non-T "if-stmt" item 1
Linha 8 Non-T "stmt" item 6
Linha 8 Non-T "stmt-list" item 2
8: ( -> LPAR
8: b -> ID
8: == -> EQ
Linha 8 Non-T "idx-safe-expr" item 8
Linha 8 Non-T "expr" item 1
8: 0 -> INT_VAL
Linha 8 Non-T "var-val" item 1
Linha 8 Non-T "idx-safe-expr" item 1
Linha 8 Non-T "expr" item 1
8: ) -> RPAR
Linha 8 Non-T "logic-expr" item 1
Linha 8 Non-T "idx-unsafe-expr" item 2
Linha 8 Non-T "expr" item 2
8: { -> LBRACE
9: return -> RETURN
9: a -> ID
9: ; -> SEMI
Linha 9 Non-T "idx-safe-expr" item 8
Linha 9 Non-T "expr" item 1
Linha 9 Non-T "stmt" item 11
Linha 9 Non-T "stmt-list" item 2
10: } -> RBRACE
Linha 10 Non-T "line" item 1
13: if -> IF
Linha 13 Non-T "if-stmt" item 1
Linha 13 Non-T "stmt" item 6
Linha 13 Non-T "stmt-list" item 1
13: ( -> LPAR
13: a -> ID
13: == -> EQ
Linha 13 Non-T "idx-safe-expr" item 8
Linha 13 Non-T "expr" item 1
13: b -> ID
13: ) -> RPAR
Linha 13 Non-T "idx-safe-expr" item 8
Linha 13 Non-T "expr" item 1
Linha 13 Non-T "logic-expr" item 1
Linha 13 Non-T "idx-unsafe-expr" item 2
Linha 13 Non-T "expr" item 2
13: { -> LBRACE
14: return -> RETURN
14: a -> ID
14: ; -> SEMI
Linha 14 Non-T "idx-safe-expr" item 8
Linha 14 Non-T "expr" item 1
Linha 14 Non-T "stmt" item 11
Linha 14 Non-T "stmt-list" item 2
15: } -> RBRACE
Linha 15 Non-T "line" item 1
18: if -> IF
Linha 18 Non-T "if-stmt" item 1
Linha 18 Non-T "stmt" item 6
Linha 18 Non-T "stmt-list" item 1
18: ( -> LPAR
18: a -> ID
18: > -> GT
Linha 18 Non-T "idx-safe-expr" item 8
Linha 18 Non-T "expr" item 1
18: b -> ID
18: ) -> RPAR
Linha 18 Non-T "idx-safe-expr" item 8
Linha 18 Non-T "expr" item 1
Linha 18 Non-T "logic-expr" item 8
Linha 18 Non-T "idx-unsafe-expr" item 2
Linha 18 Non-T "expr" item 2
18: { -> LBRACE
19: return -> RETURN
19: gcd -> ID
19: ( -> LPAR
19: a -> ID
19: - -> SUB
Linha 19 Non-T "idx-safe-expr" item 8
Linha 19 Non-T "expr" item 1
19: b -> ID
19: , -> COMMA
Linha 19 Non-T "idx-safe-expr" item 8
Linha 19 Non-T "expr" item 1
Linha 19 Non-T "arit-expr" item 2
Linha 19 Non-T "idx-safe-expr" item 3
Linha 19 Non-T "expr" item 1
19: b -> ID
19: ) -> RPAR
Linha 19 Non-T "idx-safe-expr" item 8
Linha 19 Non-T "expr" item 1
Linha 19 Non-T "args-list" item 4
Linha 19 Non-T "args-list" item 2
19: ; -> SEMI
Linha 19 Non-T "var-obj" item 1
Linha 19 Non-T "idx-unsafe-expr" item 3
Linha 19 Non-T "expr" item 2
Linha 19 Non-T "stmt" item 11
Linha 19 Non-T "stmt-list" item 2
20: } -> RBRACE
Linha 20 Non-T "line" item 1
21: return -> RETURN
Linha 21 Non-T "if-stmt" item 1
Linha 21 Non-T "stmt" item 6
Linha 21 Non-T "stmt-list" item 1
21: gcd -> ID
21: ( -> LPAR
21: a -> ID
21: , -> COMMA
Linha 21 Non-T "idx-safe-expr" item 8
Linha 21 Non-T "expr" item 1
21: b -> ID
21: - -> SUB
Linha 21 Non-T "idx-safe-expr" item 8
Linha 21 Non-T "expr" item 1
21: a -> ID
21: ) -> RPAR
Linha 21 Non-T "idx-safe-expr" item 8
Linha 21 Non-T "expr" item 1
Linha 21 Non-T "arit-expr" item 2
Linha 21 Non-T "idx-safe-expr" item 3
Linha 21 Non-T "expr" item 1
Linha 21 Non-T "args-list" item 4
Linha 21 Non-T "args-list" item 2
21: ; -> SEMI
Linha 21 Non-T "var-obj" item 1
Linha 21 Non-T "idx-unsafe-expr" item 3
Linha 21 Non-T "expr" item 2
Linha 21 Non-T "stmt" item 11
Linha 21 Non-T "stmt-list" item 1
22: } -> RBRACE
Linha 22 Non-T "line" item 1
Linha 22 Non-T "func-def" item 2
Linha 22 Non-T "stmt" item 2
Linha 22 Non-T "stmt-list" item 2
25: let -> LET
25: a -> ID
25: = -> ASSIGN
Linha 25 Non-T "id-list" item 2
25: gcd -> ID
25: ( -> LPAR
25: 10 -> INT_VAL
Linha 25 Non-T "var-val" item 1
Linha 25 Non-T "idx-safe-expr" item 1
Linha 25 Non-T "expr" item 1
25: , -> COMMA
25: 3 -> INT_VAL
Linha 25 Non-T "var-val" item 1
Linha 25 Non-T "idx-safe-expr" item 1
Linha 25 Non-T "expr" item 1
25: ) -> RPAR
Linha 25 Non-T "args-list" item 4
Linha 25 Non-T "args-list" item 2
25: ; -> SEMI
Linha 25 Non-T "var-obj" item 1
Linha 25 Non-T "idx-unsafe-expr" item 3
Linha 25 Non-T "expr" item 2
Linha 25 Non-T "var-declr" item 2
Linha 25 Non-T "stmt" item 1
Linha 25 Non-T "stmt-list" item 1
27: console -> ID
27: . -> DOT
27: log -> ID
27: ( -> LPAR
27: a -> ID
27: ) -> RPAR
Linha 27 Non-T "idx-safe-expr" item 8
Linha 27 Non-T "expr" item 1
Linha 27 Non-T "args-list" item 4
Linha 27 Non-T "var-met" item 1
27: ; -> SEMI
Linha 27 Non-T "var-att" item 3
Linha 27 Non-T "idx-safe-expr" item 2
Linha 27 Non-T "expr" item 1
Linha 27 Non-T "stmt" item 4
Linha 27 Non-T "stmt-list" item 1
Linha 27 Non-T "line" item 1
Parse successful
